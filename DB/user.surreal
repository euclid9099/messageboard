-- import on running database (with user 'root' and password 'root') with
-- surreal import --conn http://localhost:8000 --user root --pass root --ns global --db global .\user.surreal

DEFINE TABLE user SCHEMAFULL
  PERMISSIONS
    FOR select FULL, 
    FOR update WHERE $auth.admin OR id = $auth.id, 
    FOR create NONE,
    FOR delete WHERE $auth.admin OR id = $auth.id;
--- define FIELD's
DEFINE FIELD pass ON user TYPE string
  VALUE IF string::startsWith($value, "$argon") THEN $value ELSE crypto::argon2::generate($value) END
  ASSERT $value != NONE
  PERMISSIONS
    FOR update WHERE id = $auth.id,
    FOR select NONE;
DEFINE FIELD admin ON user TYPE bool
  PERMISSIONS
    FOR update WHERE $auth.admin = true;
DEFINE FIELD username ON user TYPE string
  ASSERT $value != NONE
  PERMISSIONS
    FOR update WHERE id = $auth.id;
DEFINE FIELD about ON user TYPE string
  ASSERT string::length($value) <= 250
  PERMISSIONS
    FOR update WHERE id = $auth.id;
DEFINE FIELD profile_picture ON user TYPE string
  ASSERT $value == none or $value = /^https?:\/\/.*(\.png|\.jpg|\.gif|\.webp)$/
  PERMISSIONS
    FOR update WHERE id = $auth.id;
DEFINE FIELD archived ON user TYPE bool -- weirdness with deleting, so I added an archived field and an event to delete the user
  VALUE (IF $value IS null THEN false ELSE $value END)
  PERMISSIONS
    FOR select NONE,
    FOR update WHERE id = $auth.id OR $auth.admin;
DEFINE INDEX username_idx ON user FIELDS username UNIQUE;

DEFINE EVENT user_deleted ON TABLE user WHEN $event = "UPDATE" AND $after.archived THEN (
  DELETE $before.id
);

DEFINE SCOPE global
  -- the JWT session will be valid for whatever time specified
  SESSION 2h
  -- The optional SIGNUP clause will be run when calling the signup method for this scope
  -- It is designed to create or add a new record to the database.
  -- If set, it needs to return a record or a record id
  -- The variables can be passed in to the signin method
  SIGNUP ( CREATE user SET username = $username, pass = $pass, admin = false )
  -- The optional SIGNIN clause will be run when calling the signin method for this scope
  -- It is designed to check if a record exists in the database.
  -- If set, it needs to return a record or a record id
  -- The variables can be passed in to the signin method
  SIGNIN ( SELECT * FROM user WHERE username = $username AND crypto::argon2::compare(pass, $pass) AND archived = false );
  -- this optional clause will be run when calling the signup method for this scope